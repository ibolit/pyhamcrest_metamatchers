from hamcrest.core.base_matcher import BaseMatcher
from hamcrest.core.string_description import StringDescription


class MetaMatcher(BaseMatcher):
    def __init__(self, item, expected_match_result=True):
        self.expected_match_result = expected_match_result
        self.item = item
        self.match_result = None

        self.description = None
        self.wrong_description = None

        self.mismatch_description = None
        self.wrong_mismatch_description = None


    def with_description(self, description):
        """Adds the check for the description generated by the matcher that
        is being tested. If this method is not called, the matcher will not
        check the description at all.

        If this method _is_ called, then the description, generated by the
        matcher under test, will be checked. If the actual description doesn't
        match the one set here, the metamatcher will not match.
        """
        self.description = description
        return self


    def with_mismatch_description(self, mismatch_description):
        """Adds the check for the mismatch description generated by the
        matcher being tested. The logic is the same as with
        ::py:meth:`pyhamcrest_metamatchers.metamatchers.MetaMatcher.with_description`
        """
        self.mismatch_description = mismatch_description
        return self


    def _matches(self, matcher):
        ret = True
        self.match_result = matcher._matches(self.item)
        if self.expected_match_result:
            ret &= self.match_result
        else:
            ret &= not self.match_result

        if self.description:
            descr = StringDescription()
            matcher.describe_to(descr)
            descr = str(descr)
            descr_is_correct = descr == self.description
            if not descr_is_correct:
                self.wrong_description = descr
                ret = False

        if self.mismatch_description:
            if ret == self.expected_match_result:
                self.wrong_mismatch_description = (
                    "The matcher matched, but a mismatch description was provided")
                return False
            descr = StringDescription()
            matcher.describe_mismatch(self.item, descr)
            descr = str(descr)
            descr_is_correct = descr == self.mismatch_description
            if not descr_is_correct:
                self.wrong_mismatch_description = "The mismatch_description was <{}>. ".format(
                    descr)
                ret = False

        return ret


    def describe_to(self, description):
        description.append_text("A matcher that ")
        if not self.expected_match_result:
            description.append_text("does not match ")
        else:
            description.append_text("matches ")
        description.append_text("the item.")

        if self.description:
            description.append_text(" With the description: <{}>".format(
                self.description
            ))

        if self.mismatch_description:
            description.append_text(" With tne mismatch_description: <{}>".format(
                self.mismatch_description
            ))


    # def _mismatch_description_should_be_present(self):
    #     return self.result == self.match_result == False


    def describe_mismatch(self, item, mismatch_description):
        if self.match_result != self.expected_match_result:
            mismatch_description.append_text("The matcher ")
            if self.match_result:
                mismatch_description.append_text("matched. ")
            else:
                mismatch_description.append_text("did not match. ")
        if self.wrong_description:
            mismatch_description.append_text("The description was <{}>. ".format(
                self.wrong_description
            ))


        if self.wrong_mismatch_description:
            mismatch_description.append_text(
                self.wrong_mismatch_description
            )


def matches(a_matcher):
    """Checks that the matcher under test matches the value

    :param a_matcher: The matcher that needs to be checked.
    :return: :py:class:`pyhamcrest_metamatchers.metamatchers.MetaMatcher<MetaMatcher>`
    """
    return MetaMatcher(a_matcher)


def doesnt_match(a_matcher):
    """Checks that the matcher under test doesn't match the value

    :param a_matcher: The matcher that needs to be checked.
    :return: :py:class:`pyhamcrest_metamatchers.metamatchers.MetaMatcher<MetaMatcher>`
    """
    return MetaMatcher(a_matcher, False)
